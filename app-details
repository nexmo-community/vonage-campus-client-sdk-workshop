git clone git@github.com:nexmo-community/vonage-campus-client-sdk-workshop.git

npm install nexmo-cli@alpha

nexmo setup key secret

nexmo app:create "Campus Workshop Test" --capabilities=voice,rtc --voice-event-url=http://laka.ngrok.io/webhooks/event --voice-answer-url=http://laka.ngrok.io/webhooks/answer --rtc-event-url=http://laka.ngrok.io/webhooks/event --keyfile=private.key

Application created: 5bf52c4a-e2fd-4d3d-bfe7-ca1db056dc0c
Credentials written to /Users/laka/nexmo/workshop-tfjs-webspeech/app/.nexmo-app
Private Key saved to: private.key

nexmo uc name=bot
User created: USR-5203d436-8a8e-4255-af1a-d07c65f1df7a


update .env file

yarn

yarn workshop-app

node server.js

yarn add nexmo@beta

const Nexmo = require('nexmo')
var nexmo = new Nexmo({
  apiKey: process.env.NEXMO_API_KEY,
  apiSecret: process.env.NEXMO_API_SECRET,
  applicationId: process.env.NEXMO_APPLICATION_ID,
  privateKey: process.env.NEXMO_APPLICATION_PRIVATE_KEY_PATH
});


app
  .route('/api/new')
  .get((req, res) => {
    if (activeConversationDetails) {
      res.json(activeConversationDetails)
    } else {
      nexmo.users.create({
        name: rug.generateUsername("-")
      }, (error, user) => {
        if (error) console.log(error)

        if (user) {
          nexmo.conversations.create({
            display_name: rug.generateUsername()
          }, (error, conversation) => {
            if (error) console.log(error)

            if (conversation) {
              nexmo.conversations.members.add(conversation.id, {
                "action": "join",
                "user_id": user.id,
                "channel": {
                  "type": "app"
                }
              }, (error, member) => {
                if (error) console.log(error)

                if (member) {
                  nexmo.conversations.members.add(conversation.id, {
                    "action": "join",
                    "user_id": process.env.BOT_USER,
                    "channel": {
                      "type": "app"
                    }
                  }, (error, bot) => {
                    if (error) console.log(error)
                    const jwt = Nexmo.generateJwt(process.env.NEXMO_APPLICATION_PRIVATE_KEY_PATH, {
                      application_id: process.env.NEXMO_APPLICATION_ID,
                      sub: member.name,
                      exp: new Date().getTime() + 86400,
                      acl: acl
                    })
                    if (bot) {
                      botMember = bot.id;
                      activeConversationDetails = {
                        user,
                        conversation,
                        member,
                        bot,
                        jwt
                      }
                      res.json(activeConversationDetails)
                    }
                  })
                }
              })
            }
          })
        }
      })
    }

  })





  if (req.body.from != botMember && req.body.type === 'text') {
    bot.classify([req.body.body.text]).then(classification => {
      bot.getClassificationMessage(classification, req.body.body.text).then(response => {
        if (response === 'â›…') {
          var buttonId = rug.generateUsername("_")
          nexmo.conversations.events.create(req.body.conversation_id, {
            type: "custom:call-a-human",
            from: botMember,
            body: {
              text: `${response} I'm not smart enough to know that. Do you want to <button id="${buttonId}">Call a Human</button>?`,
              buttonId: buttonId
            }
          })
        } else {
          nexmo.conversations.events.create(req.body.conversation_id, {
            type: "text",
            from: botMember,
            body: {
              text: response
            }
          })
        }
      }).catch(console.error)
    }).catch(console.error)
  }



  action: 'talk',
  text: 'Thank you for calling a human, none is available at the moment.'
},
{
  action: 'connect',
  endpoint: [{
    type: 'phone',-
    number: '447481738558'
  }]



ngrok http 3000 --subdomain=laka
